<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Messaging.EventHubs.Processor</name>
    </assembly>
    <members>
        <member name="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal">
             <summary>
               A storage blob service that keeps track of checkpoints and ownership.
             </summary>
            
             <summary>
               A storage blob service that keeps track of checkpoints and ownership.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.#ctor(Azure.Storage.Blobs.BlobContainerClient)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal" /> class.
             </summary>
            
             <param name="blobContainerClient">The client responsible for persisting data to Azure Storage.</param>
            
             <remarks>
               The blob container referenced by the <paramref name="blobContainerClient" /> is expected to exist.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.Boolean)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal" /> class.
             </summary>
            
             <param name="blobContainerClient">The client responsible for persisting data to Azure Storage.</param>
             <param name="initializeWithLegacyCheckpoints">Indicates whether to read legacy checkpoint when no current version checkpoint is available for a partition.</param>
            
             <remarks>
               The blob container referenced by the <paramref name="blobContainerClient" /> is expected to exist.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.ListOwnershipAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
               Requests a list of the ownership assignments for partitions between each of the cooperating event processor
               instances for a given Event Hub and consumer group pairing.  This operation is used during load balancing to allow
               the processor to discover other active collaborators and to make decisions about how to best balance work
               between them.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership data to take into account when making load balancing decisions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.ClaimOwnershipAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership},System.Threading.CancellationToken)">
             <summary>
               Attempts to claim ownership of the specified partitions for processing.  This operation is used by
               load balancing to enable distributing the responsibility for processing partitions for an
               Event Hub and consumer group pairing amongst the active event processors.
             </summary>
            
             <param name="desiredOwnership">The set of partition ownership desired by the event processor instance; this is the set of partitions that it will attempt to request responsibility for processing.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership records for the partitions that were successfully claimed; this is expected to be the <paramref name="desiredOwnership" /> or a subset of those partitions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.GetCheckpointAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
               Requests checkpoint information for a specific partition, allowing an event processor to resume reading
               from the next event in the stream.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="partitionId">The identifier of the partition to read a checkpoint for.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal a request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint" /> instance, if a checkpoint was found for the requested partition; otherwise, <c>null</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.UpdateCheckpointAsync(System.String,System.String,System.String,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
             <summary>
               Creates or updates a checkpoint for a specific partition, identifying a position in the partition's event stream
               that an event processor should begin reading from.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="partitionId">The identifier of the partition the checkpoint is for.</param>
             <param name="offset">The offset to associate with the checkpoint, indicating that a processor should begin reading form the next event in the stream.</param>
             <param name="sequenceNumber">An optional sequence number to associate with the checkpoint, intended as informational metadata.  The <paramref name="offset" /> will be used for positioning when events are read.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal a request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal.BlobStorageCheckpoint">
             <summary>
               Contains the information to reflect the state of event processing for a given Event Hub partition.
               Provides access to the offset and the sequence number retrieved from the blob.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore">
             <summary>
               Allows interaction with checkpoint and ownership data needed for event processor operation,
               using Azure Storage blobs for persistence.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.#ctor(Azure.Storage.Blobs.BlobContainerClient)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore" /> class.
             </summary>
            
             <param name="blobContainerClient">The client responsible for persisting data to Azure Storage.</param>
            
             <remarks>
               The blob container referenced by the <paramref name="blobContainerClient" /> is expected to exist.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.#ctor(Azure.Messaging.EventHubs.Primitives.CheckpointStore)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore" /> class.
             </summary>
            
             <param name="checkpointStore">The implementation to which storage operations will be delegated.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.ListOwnershipAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
               Requests a list of the ownership assignments for partitions between each of the cooperating event processor
               instances for a given Event Hub and consumer group pairing.  This operation is used during load balancing to allow
               the processor to discover other active collaborators and to make decisions about how to best balance work
               between them.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership data to take into account when making load balancing decisions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.ClaimOwnershipAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership},System.Threading.CancellationToken)">
             <summary>
               Attempts to claim ownership of the specified partitions for processing.  This operation is used by
               load balancing to enable distributing the responsibility for processing partitions for an
               Event Hub and consumer group pairing amongst the active event processors.
             </summary>
            
             <param name="desiredOwnership">The set of partition ownership desired by the event processor instance; this is the set of partitions that it will attempt to request responsibility for processing.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership records for the partitions that were successfully claimed; this is expected to be the <paramref name="desiredOwnership" /> or a subset of those partitions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.GetCheckpointAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
               Requests checkpoint information for a specific partition, allowing an event processor to resume reading
               from the next event in the stream.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="partitionId">The identifier of the partition to read a checkpoint for.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal a request to cancel the operation.</param>
            
             <returns>An <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint" /> instance, if a checkpoint was found for the requested partition; otherwise, <c>null</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.UpdateCheckpointAsync(System.String,System.String,System.String,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
             <summary>
               Creates or updates a checkpoint for a specific partition, identifying a position in the partition's event stream
               that an event processor should begin reading from.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="partitionId">The identifier of the partition the checkpoint is for.</param>
             <param name="offset">The offset to associate with the checkpoint, indicating that a processor should begin reading form the next event in the stream.</param>
             <param name="sequenceNumber">An optional sequence number to associate with the checkpoint, intended as informational metadata.  The <paramref name="offset" /> will be used for positioning when events are read.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal a request to cancel the operation.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer">
             <summary>
               Handles all load balancing concerns for an event processor including claiming, stealing, and relinquishing ownership.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the processor is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.EventHubName">
             <summary>
               The name of the Event Hub that the processor is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.ConsumerGroup">
             <summary>
               The name of the consumer group this load balancer is associated with.  Events will be
               read only in the context of this group.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.OwnerIdentifier">
             <summary>
               The identifier of the EventProcessorClient that owns this load balancer.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.OwnershipExpirationInterval">
             <summary>
               The minimum amount of time for an ownership to be considered expired without further updates.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.LoadBalanceInterval">
             <summary>
               The minimum amount of time to be elapsed between two load balancing verifications.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.IsBalanced">
             <summary>
               Indicates whether the load balancer believes itself to be in a balanced state
               when considering its fair share of partitions and whether any partitions
               remain unclaimed.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.OwnedPartitionIds">
             <summary>
               The partitionIds currently owned by the associated event processor.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.OwnedPartitionCount">
             <summary>
               The number of partitions currently owned by the associated event processor.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.#ctor(Azure.Messaging.EventHubs.Primitives.CheckpointStore,System.String,System.String,System.String,System.String,System.TimeSpan,System.TimeSpan)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer" /> class.
             </summary>
            
             <param name="checkpointStore">Responsible for creation of checkpoints and for ownership claim.</param>
             <param name="identifier">The identifier of the EventProcessorClient that owns this load balancer.</param>
             <param name="consumerGroup">The name of the consumer group this load balancer is associated with.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace that the processor is associated with.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="ownershipExpirationInterval">The minimum amount of time for an ownership to be considered expired without further updates.</param>
             <param name="loadBalancingInterval">The minimum amount of time to be elapsed between two load balancing verifications.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.RunLoadBalancingAsync(System.String[],System.Threading.CancellationToken)">
             <summary>
               Performs load balancing between multiple EventProcessorClient instances, claiming others' partitions to enforce
               a more equal distribution when necessary.  It also manages its own partition processing tasks and ownership.
             </summary>
            
             <param name="partitionIds">The set of partitionIds available for ownership balancing.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
             <returns>The claimed ownership. <c>null</c> if this instance is not eligible, if no claimable ownership was found or if the claim attempt failed.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.RelinquishOwnershipAsync(System.Threading.CancellationToken)">
             <summary>
               Relinquishes this instance's ownership so they can be claimed by other processors and clears the OwnedPartitionIds.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.ReportPartitionStolen(System.String)">
             <summary>
               Allows reporting that a partition was stolen by another event consumer causing ownership
               to be considered relinquished until the next load balancing cycle reconciles with persisted
               state.
             </summary>
            
             <param name="partitionId">The identifier of the partition that was stolen.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Primitives.PartitionLoadBalancer.GetDateTimeOffsetNow">
             <summary>
                Queries the value to use for the current date/time.  This is abstracted to allow for deterministic
                values to be used for testing.
             </summary>
            
             <returns>The current date and time, in UTC.</returns>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Primitives.BlobMetadataKey">
             <summary>
               The set of keys to access or modify metadata for a blob.
             </summary>
            
             <remarks>
               The current storage SDK throws an exception when the key contains
               an uppercase letter.
             </remarks>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.BlobMetadataKey.OwnerIdentifier">
            <summary>The key to the owner identifier metadata.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.BlobMetadataKey.Offset">
            <summary>The key to the offset metadata.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Primitives.BlobMetadataKey.SequenceNumber">
            <summary>The key to the sequence number metadata.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource">
             <summary>
               EventSource for Azure-Messaging-EventHubs-Processor-BlobEventStore traces.
             </summary>
            
             <remarks>
               When defining Start/Stop tasks, it is strongly recommended that the StopEvent.Id be
               exactly StartEvent.Id + 1.
            
               Do not explicitly include the Guid here, since EventSource has a mechanism to automatically
               map to an EventSource Guid based on the Name (Azure-Messaging-EventHubs-Processor-BlobEventStore).
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.Log">
             <summary>
               Provides a singleton instance of the event source for callers to
               use for logging.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.#ctor">
             <summary>
               Prevents an instance of the <see cref="T:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource" /> class from being created
               outside the scope of this library.  Exposed for testing purposes only.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.BlobsCheckpointStoreCreated(System.String,System.String,System.String)">
             <summary>
               Indicates that a <see cref="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStoreInternal" /> was created.
             </summary>
            
             <param name="typeName">The type name for the checkpoint store.</param>
             <param name="accountName">The Storage account name corresponding to the associated container client.</param>
             <param name="containerName">The name of the associated container client.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.ListOwnershipStart(System.String,System.String,System.String)">
             <summary>
               Indicates that an attempt to retrieve a list of ownership has started.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.ListOwnershipComplete(System.String,System.String,System.String,System.Int32)">
             <summary>
               Indicates that an attempt to retrieve a list of ownership has completed.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
             <param name="ownershipCount">The amount of ownership received from the storage service.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.ListOwnershipError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an unhandled exception was encountered while retrieving a list of ownership.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.ClaimOwnershipStart(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an attempt to claim a partition ownership has started.
             </summary>
            
             <param name="partitionId">The identifier of the partition being claimed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership is associated with.</param>
             <param name="ownerIdentifier">The identifier of the processor that attempted to claim the ownership for.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.ClaimOwnershipComplete(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an attempt to retrieve claim partition ownership has completed.
             </summary>
            
             <param name="partitionId">The identifier of the partition being claimed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership is associated with.</param>
             <param name="ownerIdentifier">The identifier of the processor that attempted to claim the ownership for.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.ClaimOwnershipError(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while attempting to retrieve claim partition ownership.
             </summary>
            
             <param name="partitionId">The identifier of the partition being claimed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership is associated with.</param>
             <param name="ownerIdentifier">The identifier of the processor that attempted to claim the ownership for.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.OwnershipNotClaimable(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that ownership was unable to be claimed.
             </summary>
            
             <param name="partitionId">The identifier of the partition being claimed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership is associated with.</param>
             <param name="ownerIdentifier">The identifier of the processor that attempted to claim the ownership for.</param>
             <param name="message">The message for the failure.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.OwnershipClaimed(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that ownership was successfully claimed.
             </summary>
            
             <param name="partitionId">The identifier of the partition being claimed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the ownership is associated with.</param>
             <param name="ownerIdentifier">The identifier of the processor that attempted to claim the ownership for.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.UpdateCheckpointStart(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an attempt to create/update a checkpoint has started.
             </summary>
            
             <param name="partitionId">The identifier of the partition being checkpointed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the checkpoint is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the checkpoint is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.UpdateCheckpointComplete(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an attempt to update a checkpoint has completed.
             </summary>
            
             <param name="partitionId">The identifier of the partition being checkpointed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the checkpoint is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the checkpoint is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.UpdateCheckpointError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an unhandled exception was encountered while updating a checkpoint.
             </summary>
            
             <param name="partitionId">The identifier of the partition being checkpointed.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the checkpoint is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the checkpoint is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.InvalidCheckpointFound(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that invalid checkpoint data was found during an attempt to retrieve a list of checkpoints.
             </summary>
            
             <param name="partitionId">The identifier of the partition the data is associated with.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the data is associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the data is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the data is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.GetCheckpointStart(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an attempt to retrieve a checkpoint has started.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the checkpoint are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the checkpoint is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="partitionId">The partition id the specific checkpoint is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.GetCheckpointComplete(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an attempt to retrieve a checkpoint has completed.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the checkpoint are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the checkpoint is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="partitionId">The partition id the specific checkpoint is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.BlobEventStoreEventSource.GetCheckpointError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an unhandled exception was encountered while retrieving a checkpoint.
             </summary>
            
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the checkpoint are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub the checkpoint is associated with, relative to the Event Hubs namespace that contains it.</param>
             <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
             <param name="partitionId">The partition id the specific checkpoint is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource">
             <summary>
               Serves as an ETW event source for logging of information about
               Event Processor client.
             </summary>
            
             <remarks>
               When defining Start/Stop tasks, it is highly recommended that the
               the StopEvent.Id must be exactly StartEvent.Id + 1.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.Log">
             <summary>
               Provides a singleton instance of the event source for callers to
               use for logging.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.#ctor">
             <summary>
               Prevents an instance of the <see cref="T:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource" /> class from being created
               outside the scope of this library.  Exposed for testing purposes only.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.EventBatchProcessingStart(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> has begin processing a batch of events for a partition.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is taking place.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.EventBatchProcessingComplete(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> instance has experienced an exception while processing a batch of events.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is taking place.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.EventBatchProcessingError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that an <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> has completed processing for a batch of events.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is taking place.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.UpdateCheckpointStart(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that process of updating the checkpoint in the chosen storage service has started.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is taking place.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.UpdateCheckpointComplete(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that process of updating the checkpoint in the chosen storage service has completed.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is taking place.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.UpdateCheckpointError(System.String,System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that the process of updating the checkpoint in the chosen storage service has experienced an exception.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose processing is taking place.</param>
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource.ValidationCleanupError(System.String,System.String,System.String,System.String)">
             <summary>
               Indicates that the process of cleaning up after startup validation has experienced an exception.
             </summary>
            
             <param name="identifier">A unique name used to identify the event processor.</param>
             <param name="eventHubName">The name of the Event Hub that the processor is associated with.</param>
             <param name="consumerGroup">The name of the consumer group that the processor is associated with.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventProcessorClient">
             <summary>
               Allows for consuming and processing events across all partitions of a given Event Hub within the scope of a specific
               consumer group.  The processor is capable of collaborating with other instances for the same Event Hub and consumer
               group pairing to share work by using a common storage platform to communicate.  Fault tolerance is also built-in,
               allowing the processor to be resilient in the face of errors.
             </summary>
            
             <remarks>
               To enable coordination for sharing of partitions between <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> instances, they will assert exclusive read access to partitions
               for the consumer group.  No other readers should be active in the consumer group other than processors intending to collaborate.  Non-exclusive readers will
               be denied access; exclusive readers, including processors using a different storage locations, will interfere with the processor's operation and performance.
            
               The <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> is safe to cache and use for the lifetime of an application, and that is best practice when the application
               processes events regularly or semi-regularly.  The processor is responsible for ensuring efficient network, CPU, and memory use.  Calling either
               <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.StopProcessingAsync(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.StopProcessing(System.Threading.CancellationToken)" /> when processing is complete or as the application is shutting down will ensure
               that network resources and other unmanaged objects are properly cleaned up.
             </remarks>
            
        </member>
        <member name="E:Azure.Messaging.EventHubs.EventProcessorClient.PartitionInitializingAsync">
             <summary>
               Performs the tasks to initialize a partition, and its associated context, for event processing.
            
               It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.
             </summary>
            
             <remarks>
               This handler will be invoked concurrently, limited to one call per partition.  The processor will await each invocation before starting to process
               the associated partition.
            
               The processor will wait indefinitely for execution of the handler to complete.  It is recommended for
               implementations to avoid long-running operations, as they will delay processing for the associated partition.
             </remarks>
            
             <exception cref="T:System.ArgumentException">If an attempt is made to remove a handler that doesn't match the current handler registered.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add or remove a handler while the processor is running.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add a handler when one is currently registered.</exception>
            
        </member>
        <member name="E:Azure.Messaging.EventHubs.EventProcessorClient.PartitionClosingAsync">
             <summary>
               Performs the tasks needed when processing for a partition is being stopped.  This commonly occurs when the partition is claimed by another event processor instance or when
               the current event processor instance is shutting down.
            
               <para>It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.</para>
             </summary>
            
             <remarks>
               This handler will be invoked concurrently, as each close is independent.  No time limit is imposed on an invocation of this handler; it is safe for
               implementations to perform long-running operations and retries as needed.  This handler has no influence on processing for the associated partition
               and offers no guarantee that execution will complete before processing for the partition is restarted or migrates to a new host.
             </remarks>
            
             <exception cref="T:System.ArgumentException">If an attempt is made to remove a handler that doesn't match the current handler registered.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add or remove a handler while the processor is running.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add a handler when one is currently registered.</exception>
            
        </member>
        <member name="E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessEventAsync">
             <summary>
              Performs the tasks needed to process a batch of events for a given partition as they are read from the Event Hubs service. Implementation is mandatory.
            
               Should an exception occur within the code for this method, the event processor will allow it to propagate up the stack without attempting to handle it in any way.
               On most hosts, this will fault the task responsible for partition processing, causing it to be restarted from the last checkpoint.  On some hosts, it may crash the process.
               Developers are strongly encouraged to take all exception scenarios into account and guard against them using try/catch blocks and other means as appropriate.
            
               It is not recommended that the state of the processor be managed directly from within this handler; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.
             </summary>
            
             <remarks>
               This handler will be invoked concurrently, limited to one call per partition.  The processor will await each invocation to ensure that the events from
               the same partition are processed one-at-a-time in the order that they were read from the partition.
            
               No time limit is imposed on an invocation of this handler; the processor will wait indefinitely for execution to complete before dispatching another
               event for the associated partition.  It is safe for implementations to perform long-running operations, retries, delays, and dead-lettering activities.
             </remarks>
            
             <exception cref="T:System.ArgumentException">If an attempt is made to remove a handler that doesn't match the current handler registered.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add or remove a handler while the processor is running.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add a handler when one is currently registered.</exception>
            
        </member>
        <member name="E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync">
             <summary>
               Performs the tasks needed when an unexpected exception occurs within the operation of the event processor infrastructure.  Implementation is mandatory.
            
               This error handler is invoked when there is an exception observed within the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> itself; it is not invoked for exceptions in
               code that has been implemented to process events or other event handlers and extension points that execute developer code.  The <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> will
               make every effort to recover from exceptions and continue processing.  Should an exception that cannot be recovered from be encountered, the processor will attempt to forfeit
               ownership of all partitions that it was processing so that work may be redistributed.
            
               The exceptions surfaced to this method may be fatal or non-fatal; because the processor may not be able to accurately predict whether an
               exception was fatal or whether its state was corrupted, this method has responsibility for making the determination as to whether processing
               should be terminated or restarted.  If desired, this can be done safely by calling <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.StopProcessingAsync(System.Threading.CancellationToken)" />  and/or <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.StartProcessingAsync(System.Threading.CancellationToken)" />.
            
               It is recommended that, for production scenarios, the decision be made by considering observations made by this error handler, the method invoked
               when initializing processing for a partition, and the method invoked when processing for a partition is stopped.  Many developers will also include
               data from their monitoring platforms in this decision as well.
            
               As with event processing, should an exception occur in the code for the error handler, the event processor will allow it to bubble and will not attempt to handle
               it in any way.  Developers are strongly encouraged to take exception scenarios into account and guard against them using try/catch blocks and other means as appropriate.
             </summary>
            
             <remarks>
               This handler will be invoked concurrently and is not awaited by the processor, as each error is independent.  No time limit is imposed on an invocation of this handler;
               it is safe for implementations to perform long-running operations and retries as needed.
             </remarks>
            
             <exception cref="T:System.ArgumentException">If an attempt is made to remove a handler that doesn't match the current handler registered.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add or remove a handler while the processor is running.</exception>
             <exception cref="T:System.NotSupportedException">If an attempt is made to add a handler when one is currently registered.</exception>
            
             <seealso href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/eventhub/Azure.Messaging.EventHubs/TROUBLESHOOTING.md">Troubleshoot Event Hubs issues</seealso>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClient.FullyQualifiedNamespace">
             <summary>
               The fully qualified Event Hubs namespace that the processor is associated with.  This is likely
               to be similar to <c>{yournamespace}.servicebus.windows.net</c>.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClient.EventHubName">
             <summary>
               The name of the Event Hub that the processor is connected to, specific to the
               Event Hubs namespace that contains it.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClient.ConsumerGroup">
             <summary>
               The name of the consumer group this event processor is associated with.  Events will be
               read only in the context of this group.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClient.IsRunning">
             <summary>
               Indicates whether or not this event processor is currently running.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClient.Identifier">
             <summary>
               A unique name used to identify this event processor.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClient.Logger">
             <summary>
               The instance of <see cref="T:Azure.Messaging.EventHubs.Processor.Diagnostics.EventProcessorClientEventSource" /> which can be mocked for testing.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClient.ClientDiagnostics">
             <summary>
               The client diagnostics for this processor.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">The client responsible for persisting checkpoints and processor state to durable storage.  Processor instances sharing this storage will attempt to coordinate and share work.  The associated container is expected to exist.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
            
             <remarks>
               <para>The container associated with the <paramref name="checkpointStore" /> is expected to exist; the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               does not assume the ability to manage the storage account and is safe to run with only read/write permission for blobs in the container.</para>
            
               <para>If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.</para>
             </remarks>
            
             <seealso href="https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String,Azure.Messaging.EventHubs.EventProcessorClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">The client responsible for persisting checkpoints and processor state to durable storage.  Processor instances sharing this storage will attempt to coordinate and share work.  The associated container is expected to exist.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               <para>The container associated with the <paramref name="checkpointStore" /> is expected to exist; the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               does not assume the ability to manage the storage account and is safe to run with only read/write permission for blobs in the container.</para>
            
               <para>If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.</para>
             </remarks>
            
             <seealso href="https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">The client responsible for persisting checkpoints and processor state to durable storage.  Processor instances sharing this storage will attempt to coordinate and share work.  The associated container is expected to exist.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
            
             <remarks>
               <para>The container associated with the <paramref name="checkpointStore" /> is expected to exist; the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               does not assume the ability to manage the storage account and is safe to run with only read/write permission for blobs in the container.</para>
            
               <para>If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.</para>
             </remarks>
            
             <seealso href="https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String,System.String,Azure.Messaging.EventHubs.EventProcessorClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">The client responsible for persisting checkpoints and processor state to durable storage.  Processor instances sharing this storage will attempt to coordinate and share work.  The associated container is expected to exist.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               <para>The container associated with the <paramref name="checkpointStore" /> is expected to exist; the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               does not assume the ability to manage the storage account and is safe to run with only read/write permission for blobs in the container.</para>
            
               <para>If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.</para>
             </remarks>
            
             <seealso href="https://docs.microsoft.com/azure/event-hubs/event-hubs-get-connection-string">How to get an Event Hubs connection string</seealso>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String,System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.EventProcessorClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">The client responsible for persisting checkpoints and processor state to durable storage.  Processor instances sharing this storage will attempt to coordinate and share work.  The associated container is expected to exist.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="credential">The shared access key credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               The container associated with the <paramref name="checkpointStore" /> is expected to exist; the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               does not assume the ability to manage the storage account and is safe to run with only read/write permission for blobs in the container.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String,System.String,Azure.AzureSasCredential,Azure.Messaging.EventHubs.EventProcessorClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">The client responsible for persisting checkpoints and processor state to durable storage.  Processor instances sharing this storage will attempt to coordinate and share work.  The associated container is expected to exist.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="credential">The shared access signature credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               The container associated with the <paramref name="checkpointStore" /> is expected to exist; the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               does not assume the ability to manage the storage account and is safe to run with only read/write permission for blobs in the container.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Storage.Blobs.BlobContainerClient,System.String,System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.EventProcessorClientOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">The client responsible for persisting checkpoints and processor state to durable storage.  Processor instances sharing this storage will attempt to coordinate and share work.  The associated container is expected to exist.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="credential">The Azure identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               The container associated with the <paramref name="checkpointStore" /> is expected to exist; the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               does not assume the ability to manage the storage account and is safe to run with only read/write permission for blobs in the container.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Messaging.EventHubs.Primitives.CheckpointStore,System.String,System.String,System.String,System.Int32,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">Responsible for creation of checkpoints and for ownership claim.  Processor instances sharing this storage will attempt to coordinate and share work.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="cacheEventCount">The maximum number of events that will be read from the Event Hubs service and held in a local memory cache when reading is active and events are being emitted to an enumerator for processing.</param>
             <param name="credential">An Azure identity credential to satisfy base class requirements; this credential may not be <c>null</c> but will only be used in the case that <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.CreateConnection" /> has not been overridden.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               This constructor is intended only to support functional testing and mocking; it should not be used for production scenarios.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Messaging.EventHubs.Primitives.CheckpointStore,System.String,System.String,System.String,System.Int32,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">Responsible for creation of checkpoints and for ownership claim.  Processor instances sharing this storage will attempt to coordinate and share work.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="cacheEventCount">The maximum number of events that will be read from the Event Hubs service and held in a local memory cache when reading is active and events are being emitted to an enumerator for processing.</param>
             <param name="credential">A shared access key credential to satisfy base class requirements; this credential may not be <c>null</c> but will only be used in the case that <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.CreateConnection" /> has not been overridden.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               This constructor is intended only to support functional testing and mocking; it should not be used for production scenarios.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor(Azure.Messaging.EventHubs.Primitives.CheckpointStore,System.String,System.String,System.String,System.Int32,Azure.AzureSasCredential,Azure.Messaging.EventHubs.Primitives.EventProcessorOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
             <param name="checkpointStore">Responsible for creation of checkpoints and for ownership claim.  Processor instances sharing this storage will attempt to coordinate and share work.</param>
             <param name="consumerGroup">The name of the consumer group this processor is associated with.  The processor will assert exclusive read access to partitions for this group.</param>
             <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
             <param name="eventHubName">The name of the specific Event Hub to associate the processor with.</param>
             <param name="cacheEventCount">The maximum number of events that will be read from the Event Hubs service and held in a local memory cache when reading is active and events are being emitted to an enumerator for processing.</param>
             <param name="credential">A shared access signature credential to satisfy base class requirements; this credential may not be <c>null</c> but will only be used in the case that <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.CreateConnection" /> has not been overridden.</param>
             <param name="clientOptions">The set of options to use for this processor.</param>
            
             <remarks>
               This constructor is intended only to support functional testing and mocking; it should not be used for production scenarios.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.#ctor">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.StartProcessingAsync(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> to begin processing events.  Should this method be called while the processor
               is running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the start operation.  This won't affect the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> once it starts running.</param>
            
             <exception cref="T:System.InvalidOperationException">Occurs when either the <see cref="E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessEventAsync" /> handler or <see cref="E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync" /> handler has not been registered.</exception>
            
             <exception cref="T:System.AggregateException">
               As the processor starts, it will attempt to detect configuration and permissions errors that would prevent it from
               being able to recover without intervention.  For example, an incorrect connection string or the inability to write to the
               storage container would be detected.  These exceptions will be packaged as an <see cref="T:System.AggregateException" />, and will cause
               <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.StartProcessingAsync(System.Threading.CancellationToken)" /> to fail.
             </exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.StartProcessing(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> to begin processing events.  Should this method be called while the processor
               is running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the start operation.  This won't affect the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> once it starts running.</param>
            
             <exception cref="T:System.InvalidOperationException">Occurs when either the <see cref="E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessEventAsync" /> handler or <see cref="E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync" /> handler has not been registered.</exception>
            
             <exception cref="T:System.AggregateException">
               As the processor starts, it will attempt to detect configuration and permissions errors that would prevent it from
               being able to recover without intervention.  For example, an incorrect connection string or the inability to write to the
               storage container would be detected.  These exceptions will be packaged as an <see cref="T:System.AggregateException" />, and will cause
               <see cref="M:Azure.Messaging.EventHubs.EventProcessorClient.StartProcessing(System.Threading.CancellationToken)" /> to fail.
             </exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.StopProcessingAsync(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> to stop processing events.  Should this method be called while the processor
               is not running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the stop operation.  If the operation is successfully canceled, the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> will keep running.</param>
            
             <remarks>
               When stopping, the processor will update the ownership of partitions that it was responsible for processing and clean up network resources used for communication with
               the Event Hubs service.  As a result, this method will perform network I/O and may need to wait for partition reads that were active to complete.
            
               <para>Due to service calls and network latency, an invocation of this method may take slightly longer than the specified <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.MaximumWaitTime" /> or
               if the wait time was not configured, the duration of the <see cref="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.TryTimeout" /> of the configured retry policy.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.StopProcessing(System.Threading.CancellationToken)">
             <summary>
               Signals the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> to stop processing events.  Should this method be called while the processor
               is not running, no action is taken.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the stop operation.  If the operation is successfully canceled, the <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" /> will keep running.</param>
            
             <remarks>
               When stopping, the processor will update the ownership of partitions that it was responsible for processing and clean up network resources used for communication with
               the Event Hubs service.  As a result, this method will perform network I/O and may need to wait for partition reads that were active to complete.
            
               <para>Due to service calls and network latency, an invocation of this method may take slightly longer than the specified <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.MaximumWaitTime" /> or
               if the wait time was not configured, the duration of the <see cref="P:Azure.Messaging.EventHubs.EventHubsRetryOptions.TryTimeout" /> of the configured retry policy.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.ValidateStoragePermissionsAsync(Azure.Storage.Blobs.BlobContainerClient,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed to validate basic configuration and permissions of the dependencies needed for
               the processor to function.
             </summary>
            
             <param name="containerClient">The <see cref="T:Azure.Storage.Blobs.BlobContainerClient" /> to use for validating storage operations.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the start operation.</param>
            
             <exception cref="T:System.AggregateException">Any validation failures will result in an aggregate exception.</exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.ValidateProcessingPreconditions(System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed to validate basic configuration and permissions of the dependencies needed for
               the processor to function.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the validation.</param>
            
             <exception cref="T:System.AggregateException">Any validation failures will result in an aggregate exception.</exception>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.UpdateCheckpointAsync(System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
             <summary>
               Creates or updates a checkpoint for a specific partition, identifying a position in the partition's event stream
               that an event processor should begin reading from.
             </summary>
            
             <param name="partitionId">The identifier of the partition the checkpoint is for.</param>
             <param name="offset">The offset to associate with the checkpoint, indicating that a processor should begin reading form the next event in the stream.</param>
             <param name="sequenceNumber">An optional sequence number to associate with the checkpoint, intended as informational metadata.  The <paramref name="offset" /> will be used for positioning when events are read.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal a request to cancel the operation.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.CreateConnection">
             <summary>
               Creates an <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> to use for communicating with the Event Hubs service.
             </summary>
            
             <returns>The requested <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.GetCheckpointAsync(System.String,System.Threading.CancellationToken)">
             <summary>
               Returns a checkpoint for the Event Hub, consumer group, and partition ID associated with the
               event processor instance, so that processing for a given partition can be properly initialized.
             </summary>
            
             <param name="partitionId">The ID of the partition for which to retrieve the checkpoint.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The checkpoint for the processor to take into account when initializing partition.</returns>
            
             <remarks>
               Should a partition not have a corresponding checkpoint, the default starting position set by the <see cref="E:Azure.Messaging.EventHubs.EventProcessorClient.PartitionInitializingAsync" /> handler
               will be applied.  If no partition-specific starting point was specified, the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.DefaultStartingPosition" /> will
               be used to initialize the partition for processing.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.ListOwnershipAsync(System.Threading.CancellationToken)">
             <summary>
               Produces a list of the ownership assignments for partitions between each of the cooperating event processor
               instances for a given Event Hub and consumer group pairing.  This method is used when load balancing to allow
               the processor to discover other active collaborators and to make decisions about how to best balance work
               between them.
             </summary>
            
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership records to take into account when making load balancing decisions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.ClaimOwnershipAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership},System.Threading.CancellationToken)">
             <summary>
               Attempts to claim ownership of the specified partitions for processing.  This method is used by
               load balancing to allow event processor instances to distribute the responsibility for processing
               partitions for a given Event Hub and consumer group pairing amongst the active event processors.
             </summary>
            
             <param name="desiredOwnership">The set of partition ownership desired by the event processor instance; this is the set of partitions that it will attempt to request responsibility for processing.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <returns>The set of ownership records for the partitions that were successfully claimed; this is expected to be the <paramref name="desiredOwnership" /> or a subset of those partitions.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.OnProcessingEventBatchAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.EventData},Azure.Messaging.EventHubs.Primitives.EventProcessorPartition,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed to process a batch of events for a given partition as they are read from the Event Hubs service.
             </summary>
            
             <param name="events">The batch of events to be processed.</param>
             <param name="partition">The context of the partition from which the events were read.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <remarks>
               <para>The number of events in the <paramref name="events" /> batch may vary.  The batch will contain a number of events between zero and batch size that was
               requested when the processor was created, depending on the availability of events in the partition within the requested <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" />
               interval.
            
               If there are enough events available in the Event Hub partition to fill a batch of the requested size, the processor will populate the batch and dispatch it to this method
               immediately.  If there were not a sufficient number of events available in the partition to populate a full batch, the event processor will continue reading from the partition
               to reach the requested batch size until the <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" /> has elapsed, at which point it will return a batch containing whatever events were
               available by the end of that period.
            
               If a <see cref="P:Azure.Messaging.EventHubs.Primitives.EventProcessorOptions.MaximumWaitTime" /> was not requested, indicated by setting the option to <c>null</c>, the event processor will continue reading from the Event Hub
               partition until a full batch of the requested size could be populated and will not dispatch any partial batches to this method.</para>
            
               <para>Should an exception occur within the code for this method, the event processor will allow it to bubble and will not surface to the error handler or attempt to handle
               it in any way.  Developers are strongly encouraged to take exception scenarios into account and guard against them using try/catch blocks and other means as appropriate.</para>
            
               <para>It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.</para>
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.OnProcessingErrorAsync(System.Exception,Azure.Messaging.EventHubs.Primitives.EventProcessorPartition,System.String,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed when an unexpected exception occurs within the operation of the
               event processor infrastructure.
             </summary>
            
             <param name="exception">The exception that occurred during operation of the event processor.</param>
             <param name="partition">The context of the partition associated with the error, if any; otherwise, <c>null</c>.  This may only be initialized for members of <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorPartition" />, depending on the point at which the error occurred.</param>
             <param name="operationDescription">A short textual description of the operation during which the exception occurred; intended to be informational only.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
            
             <remarks>
               This error handler is invoked when there is an exception observed within the event processor itself; it is not invoked for exceptions in
               code that has been implemented to process events or other overrides and extension points that are not critical to the processor's operation.
               The event processor will make every effort to recover from exceptions and continue processing.  Should an exception that cannot be recovered
               from be encountered, the processor will attempt to forfeit ownership of all partitions that it was processing so that work may be redistributed.
            
               The exceptions surfaced to this method may be fatal or non-fatal; because the processor may not be able to accurately predict whether an
               exception was fatal or whether its state was corrupted, this method has responsibility for making the determination as to whether processing
               should be terminated or restarted.  The method may do so by calling Stop on the processor instance and then, if desired, calling Start on the processor.
            
               It is recommended that, for production scenarios, the decision be made by considering observations made by this error handler, the method invoked
               when initializing processing for a partition, and the method invoked when processing for a partition is stopped.  Many developers will also include
               data from their monitoring platforms in this decision as well.
            
               As with event processing, should an exception occur in the code for the error handler, the event processor will allow it to bubble and will not attempt to handle
               it in any way.  Developers are strongly encouraged to take exception scenarios into account and guard against them using try/catch blocks and other means as appropriate.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.OnInitializingPartitionAsync(Azure.Messaging.EventHubs.Primitives.EventProcessorPartition,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks to initialize a partition, and its associated context, for event processing.
             </summary>
            
             <param name="partition">The context of the partition being initialized.  Only the well-known members of the <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorPartition" /> will be populated.  If a custom context is being used, the implementor of this method is responsible for initializing custom members.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the initialization.  This is most likely to occur if the partition is claimed by another event processor instance or the processor is shutting down.</param>
            
             <remarks>
               It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.
             </remarks>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClient.OnPartitionProcessingStoppedAsync(Azure.Messaging.EventHubs.Primitives.EventProcessorPartition,Azure.Messaging.EventHubs.Processor.ProcessingStoppedReason,System.Threading.CancellationToken)">
             <summary>
               Performs the tasks needed when processing for a partition is being stopped.  This commonly occurs when the partition
               is claimed by another event processor instance or when the current event processor instance is shutting down.
             </summary>
            
             <param name="partition">The context of the partition for which processing is being stopped.</param>
             <param name="reason">The reason that processing is being stopped for the partition.</param>
             <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is not expected to signal under normal circumstances and will only occur if the processor encounters an unrecoverable error.</param>
            
             <remarks>
               It is not recommended that the state of the processor be managed directly from within this method; requesting to start or stop the processor may result in
               a deadlock scenario, especially if using the synchronous form of the call.
             </remarks>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.EventProcessorClientOptions">
             <summary>
               The set of options that can be specified when creating an <see cref="T:Azure.Messaging.EventHubs.EventProcessorClient" />
               to configure its behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.Identifier">
             <summary>
               A unique name used to identify the event processor.  If <c>null</c> or empty, a GUID will be used as the
               identifier.
             </summary>
            
             <value>If not specified, a random unique identifier will be generated.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.TrackLastEnqueuedEventProperties">
             <summary>
               Indicates whether or not the consumer should request information on the last enqueued event on the partition
               associated with a given event, and track that information as events are received.
             </summary>
            
             <value>
               <c>true</c> if information about a partition's last event should be requested and tracked; otherwise, <c>false</c>.  The
               default value is <c>true</c>.
             </value>
            
             <remarks>
               When information about a partition's last enqueued event is being tracked, each event received from the Event Hubs
               service will carry metadata about the partition that it otherwise would not. This results in a small amount of
               additional network bandwidth consumption that is generally a favorable trade-off when considered
               against periodically making requests for partition properties using one of the Event Hub clients.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.LoadBalancingStrategy">
             <summary>
               The strategy that an event processor will use to make decisions about
               partition ownership when performing load balancing to share work with
               other event processors.
             </summary>
            
             <value>The default strategy is <see cref="F:Azure.Messaging.EventHubs.Processor.LoadBalancingStrategy.Greedy" />.</value>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Processor.LoadBalancingStrategy" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.MaximumWaitTime">
             <summary>
               The maximum amount of time to wait for an event to become available for a given partition before emitting
               an empty event.
             </summary>
            
             <value>
               If <c>null</c>, the processor will wait indefinitely for an event to become available; otherwise, a value will
               always be emitted within this interval, whether an event was available or not.
             </value>
            
             <remarks>
               When set, if no events are received before the timeout, <see cref="E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessEventAsync" />
               is called with a <see cref="T:Azure.Messaging.EventHubs.Processor.ProcessEventArgs" /> instance that does not contain any event data. The
               <see cref="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.HasEvent" /> property is intended to help detect this.
             </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested wait time is negative.</exception>
            
             <seealso cref="P:Azure.Messaging.EventHubs.Processor.ProcessEventArgs.HasEvent" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount">
             <summary>
               The maximum number of events that will be read from the Event Hubs service and held in a local memory
               cache when reading is active and events are being emitted to an enumerator for processing.
             </summary>
            
             <value>
               The <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount" /> is a control that developers can use to help tune performance for the specific
               needs of an application, given its expected size of events, throughput needs, and expected scenarios for using
               Event Hubs.
            
               The default cache count is 100.
             </value>
            
             <remarks>
               The size of this cache has an influence on the efficiency of reading events from the Event Hubs service.  The
               larger the size of the cache, the more efficiently service operations can be buffered in the background to
               improve throughput.  This comes at the cost of additional memory use and potentially increases network I/O.
            
               For scenarios where the size of events is small and many events are flowing through the system, using a larger
               <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> may help improve throughput.  For scenarios where
               the size of events is larger or when processing of events is expected to be a heavier and slower operation, using
               a smaller size <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> may help manage resource use without
               incurring a non-trivial cost to throughput.
            
               Regardless of the values, it is generally recommended that the <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> be at least 2-3
               times as large as the <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount" /> to allow for efficient buffering of service operations.
             </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested count is less than 1.</exception>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount">
             <summary>
               The number of events that will be eagerly requested from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               The <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> is a control that developers can use to help tune performance for the specific
               needs of an application, given its expected size of events, throughput needs, and expected scenarios for using
               Event Hubs.
            
               The default prefetch count is 300.
             </value>
            
             <remarks>
               The size of the prefetch count has an influence on the efficiency of reading events from the Event Hubs service.
               The larger the size of the cache, the more efficiently service operations can be buffered in the background to
               improve throughput.  This comes at the cost of additional memory use and potentially increases network I/O.
            
               For scenarios where the size of events is small and many events are flowing through the system, using a larger
               <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> may help improve throughput.  For scenarios where
               the size of events is larger or when processing of events is expected to be a heavier and slower operation, using
               a smaller size <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount" /> and <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> may help manage resource use without
               incurring a non-trivial cost to throughput.
            
               Regardless of the values, it is generally recommended that the <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> be at least 2-3
               times as large as the <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.CacheEventCount" /> to allow for efficient buffering of service operations.
             </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested count is negative.</exception>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchSizeInBytes">
             <summary>
               The desired number of bytes to attempt to eagerly request from the Event Hubs service and queued locally without regard to
               whether a read operation is currently active, intended to help maximize throughput by allowing events to be read from
               from a local cache rather than waiting on a service request.
             </summary>
            
             <value>
               <para>When set to <c>null</c>, the option is considered disabled; otherwise, it will be considered enabled and take
               precedence over any value specified for the <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" />The <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchSizeInBytes" /> is an
               advanced control that developers can use to help tune performance in some scenarios; it is recommended to prefer using
               the <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchCount" /> over this option where possible for more accurate control and more predictable throughput.</para>
            
               <para>This size should be considered a statement of intent rather than a guaranteed limit; the local cache may be larger or
               smaller than the number of bytes specified, and will always contain at least one event when the <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PrefetchSizeInBytes" />
               is specified.  A heuristic is used to predict the average event size to use for size calculations, which should be expected to fluctuate
               as traffic passes through the system.  Consequently, the resulting resource use will fluctuate as well.</para>
            
               <para>This option is disabled by default with the value set to <c>null</c>.</para>
             </value>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested size is negative.</exception>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.LoadBalancingUpdateInterval">
             <summary>
               The desired amount of time to allow between load balancing verification attempts.
             </summary>
            
             <value>The default load balancing interval is 30 seconds.</value>
            
             <remarks>
               Because load balancing holds less priority than processing events, this interval
               should be considered the minimum time that will elapse between verification attempts; operations
               with higher priority may cause a delay longer than this interval for load balancing.
             </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested interval is negative.</exception>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.PartitionOwnershipExpirationInterval">
             <summary>
               The desired amount of time to consider a partition owned by a specific event processor
               instance before the ownership is considered stale and the partition becomes eligible to be
               requested by another event processor that wishes to assume responsibility for processing it.
             </summary>
            
             <value>The default ownership interval is 2 minutes.</value>
            
             <remarks>
               As a general guideline, it is advised that this value be greater than the configured
               <see cref="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.LoadBalancingUpdateInterval" /> by at least a factor of two. It is recommended that
               this be a factor of three or more, unless there are application scenarios that require more
               aggressive ownership expiration.
             </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">Occurs when the requested interval is negative.</exception>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.ConnectionOptions">
             <summary>
               Gets or sets the options used for configuring the connection to the Event Hubs service.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.EventProcessorClientOptions.RetryOptions">
             <summary>
               The set of options to use for determining whether a failed operation should be retried and,
               if so, the amount of time to wait between retry attempts.  These options also control the
               amount of time allowed for publishing events and other interactions with the Event Hubs service.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClientOptions.Equals(System.Object)">
             <summary>
               Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
             </summary>
            
             <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
             <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClientOptions.GetHashCode">
             <summary>
               Returns a hash code for this instance.
             </summary>
            
             <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClientOptions.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.EventProcessorClientOptions.Clone">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.EventProcessorClientOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.EventProcessorClientOptions" />.</returns>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.ResourcesNamespace.Current">
            <summary>The default namespace of the local assembly; this is where the embedded resources appear.</summary>
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.BasicRetryPolicy">
             <summary>
               The default retry policy for the Event Hubs client library, respecting the
               configuration specified as a set of <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.Options">
             <summary>
               The set of options responsible for configuring the retry
               behavior.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.JitterFactor">
             <summary>
               The factor to apply to the base delay for use as a base jitter value.
             </summary>
            
             <value>This factor is used as the basis for random jitter to apply to the calculated retry duration.</value>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.MinimumThrottleSeconds">
             <summary>
               The minimum number of seconds to increase the calculated retry duration when a
               service signals a request to throttle.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.MaximumThrottleSeconds">
             <summary>
               The maximum number of seconds to increase the calculated retry duration when a
               service signals a request to throttle.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.#ctor(Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Core.BasicRetryPolicy" /> class.
             </summary>
            
             <param name="retryOptions">The options which control the retry approach.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.CalculateTryTimeout(System.Int32)">
             <summary>
               Calculates the amount of time to allow the current attempt for an operation to
               complete before considering it to be timed out.
             </summary>
            
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to allow for an operation to complete.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.BasicRetryPolicy.CalculateRetryDelay(System.Exception,System.Int32)">
             <summary>
               Calculates the amount of time to wait before another attempt should be made.
             </summary>
            
             <param name="lastException">The last exception that was observed for the operation to be retried.</param>
             <param name="attemptCount">The number of total attempts that have been made, including the initial attempt before any retries.</param>
            
             <returns>The amount of time to delay before retrying the associated operation; if <c>null</c>, then the operation is no longer eligible to be retried.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.CancellationTokenExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.Threading.CancellationToken" />
               struct.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.CancellationTokenExtensions.ThrowIfCancellationRequested``1(System.Threading.CancellationToken)">
             <summary>
               Throws an exception of the requested type if cancellation has been requested
               of the <paramref name="instance" />.
             </summary>
            
             <typeparam name="T">The type of exception to throw; the type must have a parameterless constructor.</typeparam>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.EventHubConnectionOptionsExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.EventHubs.EventHubConnectionOptions" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubConnectionOptionsExtensions.Clone(Azure.Messaging.EventHubs.EventHubConnectionOptions)">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.EventHubConnectionOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.EventHubConnectionOptions" />.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.GetFailureData``1(Azure.Messaging.EventHubs.EventHubsException)">
             <summary>
               Gets the data value related to the exception <see cref="T:Azure.Messaging.EventHubs.EventHubsException.FailureReason" />.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The Data value or null.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.GetFailureOperation(Azure.Messaging.EventHubs.EventHubsException)">
             <summary>
               Gets the failed operation name related to the exception.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The failed operation name.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.SetFailureData``1(Azure.Messaging.EventHubs.EventHubsException,``0)">
             <summary>
               Sets the data value related to the exception.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="data">The value to store in the Exception Data.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsExceptionExtensions.SetFailureOperation(Azure.Messaging.EventHubs.EventHubsException,System.String)">
             <summary>
               Sets the failed operation name related to the exception.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="operationName">The failed operation name.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions">
             <summary>
               The set of extension methods for the <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />
               class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions.Clone(Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Creates a new copy of the current <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />, cloning its attributes into a new instance.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>A new copy of <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryOptions" />.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions.ToRetryPolicy(Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Converts the options into a retry policy for use.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
            
             <returns>The <see cref="T:Azure.Messaging.EventHubs.EventHubsRetryPolicy" /> represented by the options.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.EventHubsRetryOptionsExtensions.IsEquivalentTo(Azure.Messaging.EventHubs.EventHubsRetryOptions,Azure.Messaging.EventHubs.EventHubsRetryOptions)">
             <summary>
               Compares retry options between two instances to determine if the
               instances represent the same set of options.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="other">The other set of retry options to consider.</param>
            
             <returns><c>true</c>, if the two sets of options are structurally equivalent; otherwise, <c>false</c>.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Core.TimeSpanExtensions">
             <summary>
               The set of extensions for the <see cref="T:System.TimeSpan" /> class.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Core.TimeSpanExtensions.CalculateRemaining(System.TimeSpan,System.TimeSpan)">
             <summary>
               Calculates the duration remaining in a given period, with consideration to
               the amount of time that has already elapsed.
             </summary>
            
             <param name="instance">The instance that this method was invoked on.</param>
             <param name="elapsed">The amount of time that has already elapsed.</param>
            
             <returns>The amount of time remaining in the time period.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty">
             <summary>
               The set of well-known properties associated with Event Hubs diagnostics.
             </summary>
            
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.DiagnosticNamespace">
            <summary>The namespace used for the Event Hubs diagnostic scope.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ResourceProviderNamespace">
            <summary>The namespace used for the Azure Resource Manager provider namespace.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EnqueuedTimeAttribute">
            <summary>The attribute which represents the UNIX Epoch enqueued time of an event to associate with diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventHubsServiceContext">
            <summary>The value which identifies the Event Hubs diagnostics context.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventHubProducerType">
            <summary>The value which identifies an Event Hub producer as the type associated with the diagnostics information.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.KindAttribute">
            <summary>The attribute which represents the kind of diagnostic scope.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ProducerKind">
            <summary>The value which identifies the message instrumentation scope kind.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ClientKind">
            <summary>The value which identifies the message client scope kind.</summary>
        </member>
        <member name="F:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ConsumerKind">
            <summary>The value which identifies the processor scope kind.</summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventActivityName">
             <summary>
               The activity name associated with events.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.ProducerActivityName">
             <summary>
               The activity name associated with Event Hub producers.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventProcessorProcessingActivityName">
             <summary>
               The activity name associated with EventProcessor processing a list of events.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.DiagnosticProperty.EventProcessorCheckpointActivityName">
             <summary>
               The activity name associated with EventProcessor creating a checkpoint.
             </summary>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource">
             <summary>
               Serves as an ETW event source for logging of information about Partition Load Balancer.
             </summary>
            
             <remarks>
               When defining Start/Stop tasks, it is highly recommended that the
               the StopEvent.Id must be exactly StartEvent.Id + 1.
             </remarks>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.Log">
             <summary>
               Provides a singleton instance of the event source for callers to
               use for logging.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.#ctor">
             <summary>
               Prevents an instance of the <see cref="T:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource" /> class from being created
               outside the scope of this library.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.MinimumPartitionsPerEventProcessor(System.Int32)">
             <summary>
               Indicates the minimum amount of partitions every event processor needs to own when the distribution is balanced.
             </summary>
            
             <param name="count"> Minimum partitions per event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.CurrentOwnershipCount(System.Int32,System.String)">
             <summary>
               Indicates the current ownership count.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
             <param name="count"> Current ownership count.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.UnclaimedPartitions(System.Collections.Generic.HashSet{System.String})">
             <summary>
               Indicates the list of unclaimed partitions.
             </summary>
            
             <param name="unclaimedPartitions">List of unclaimed partitions.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.ClaimOwnershipStart(System.String)">
             <summary>
               Indicates that an attempt to claim ownership for a specific partition has started.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition whose ownership claim attempt is starting.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.ClaimOwnershipError(System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while claiming ownership for a specific partition.
             </summary>
            
             <param name="partitionId">The identifier of the Event Hub partition.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.ShouldStealPartition(System.String)">
             <summary>
               Indicates that the load is unbalanced and the associated event processor should own more partitions.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.StealPartition(System.String)">
             <summary>
               Indicates that stealable partitions were found, so randomly picking one of them to claim.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.RenewOwnershipStart(System.String)">
             <summary>
               Indicates that an attempt to renew ownership has started, so they don't expire.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.RenewOwnershipError(System.String,System.String)">
             <summary>
               Indicates that an exception was encountered while renewing ownership.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
             <param name="errorMessage">The message for the exception that occurred.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Diagnostics.PartitionLoadBalancerEventSource.RenewOwnershipComplete(System.String)">
             <summary>
               Indicates that an attempt to renew ownership has completed, so they don't expire.
             </summary>
            
             <param name="identifier">A unique name used to identify the associated event processor.</param>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential">
             <summary>
               Provides a generic token-based credential for a given Event Hub instance.
             </summary>
            
             <seealso cref="T:Azure.Core.TokenCredential" />
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.IsSharedAccessCredential">
             <summary>
               Indicates whether the credential is based on an Event Hubs
               shared access policy.
             </summary>
            
             <value><c>true</c> if the credential should be considered a shared access credential; otherwise, <c>false</c>.</value>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.#ctor(Azure.Core.TokenCredential)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential" /> class.
             </summary>
            
             <param name="tokenCredential">The <see cref="T:Azure.Core.TokenCredential" /> on which to base the token.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.EventHubTokenCredential.GetTokenUsingDefaultScopeAsync(System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub. It provides a default value for the Token Request Context.
             </summary>
            
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential">
             <summary>
               Provides a credential based on a shared access signature for a given
               Event Hub instance.
             </summary>
            
             <seealso cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" />
             <seealso cref="T:Azure.Core.TokenCredential" />
             <seealso cref="T:Azure.AzureNamedKeyCredential" />
             <seealso cref="T:Azure.AzureSasCredential" />
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.#ctor(Azure.Messaging.EventHubs.Authorization.SharedAccessSignature)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="signature">The shared access signature on which to base the token.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.#ctor(Azure.AzureSasCredential)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="sourceCredential">The <see cref="T:Azure.AzureSasCredential" /> to base signatures on.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.#ctor(Azure.AzureNamedKeyCredential,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential" /> class.
             </summary>
            
             <param name="sourceCredential">The <see cref="T:Azure.AzureNamedKeyCredential" /> to base signatures on.</param>
             <param name="signatureResource">The fully-qualified identifier for the resource to which this credential is intended to serve as authorization for.  This is also known as the "token audience" in some contexts.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)">
             <summary>
               Retrieves the token that represents the shared access signature credential, for
               use in authorization against an Event Hub.
             </summary>
            
             <param name="requestContext">The details of the authentication request.</param>
             <param name="cancellationToken">The token used to request cancellation of the operation.</param>
            
             <returns>The token representing the shared access signature for this credential.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature">
             <summary>
               A shared access signature, which can be used for authorization to an Event Hubs namespace
               or a specific Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.SharedAccessKeyName">
             <summary>
               The name of the shared access key, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.SharedAccessKey">
             <summary>
               The value of the shared access key, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.SignatureExpiration">
             <summary>
               The date and time that the shared access signature expires, in UTC.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.Resource">
             <summary>
               The resource to which the shared access signature is intended to serve as
               authorization.
             </summary>
            
        </member>
        <member name="P:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.Value">
             <summary>
               The shared access signature to be used for authorization, either for the Event Hubs namespace
               or the Event Hub.
             </summary>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="eventHubResource">The Event Hubs resource to which the token is intended to serve as authorization.</param>
             <param name="sharedAccessKeyName">The name of the shared access key that the signature should be based on.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
             <param name="signatureValidityDuration">The duration that the signature should be considered valid; if not specified, a default will be assumed.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String,System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="sharedAccessSignature">The shared access signature that will be parsed as the basis of this instance.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="sharedAccessSignature">The shared access signature that will be parsed as the basis of this instance.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.#ctor(System.String,System.String,System.String,System.String,System.DateTimeOffset)">
             <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> class.
             </summary>
            
             <param name="eventHubResource">The Event Hubs resource to which the token is intended to serve as authorization.</param>
             <param name="sharedAccessKeyName">The name of the shared access key that the signature should be based on.</param>
             <param name="sharedAccessKey">The value of the shared access key for the signature.</param>
             <param name="value">The shared access signature to be used for authorization.</param>
             <param name="signatureExpiration">The date and time that the shared access signature expires, in UTC.</param>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.CloneWithNewExpiration(System.TimeSpan)">
             <summary>
               Creates a new signature with the specified period for which the shared access signature is considered valid.
             </summary>
            
             <param name="signatureValidityDuration">The duration that the signature should be considered valid.</param>
            
             <returns>A new <see cref="T:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature" /> based on the same key, but with a new expiration time.</returns>
            
        </member>
        <member name="M:Azure.Messaging.EventHubs.Authorization.SharedAccessSignature.ToString">
             <summary>
               Converts the instance to string representation.
             </summary>
            
             <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            
        </member>
        <member name="T:Azure.Messaging.EventHubs.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotParseIntegerType">
            <summary>
              Looks up a localized string similar to The {0} value is expected to be a {1} bit signed integer. Actual value: '{2}'..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotSendWithPartitionIdAndPartitionKey">
            <summary>
              Looks up a localized string similar to An event cannot be published using both a partition key and a partition identifier.  This operation specified partition key `{0}` and partition id `{1}`..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotStartEventProcessorWithoutHandler">
            <summary>
              Looks up a localized string similar to Cannot begin processing without {0} handler set..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ClientNeededForThisInformationNotAvailable">
            <summary>
              Looks up a localized string similar to The Event Hub client responsible for this information is not available.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ClosedConnectionCannotPerformOperation">
            <summary>
              Looks up a localized string similar to {0} has already been closed and cannot perform the requested operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ClosedInstanceCannotPerformOperation">
            <summary>
              Looks up a localized string similar to {0} has already been closed and cannot perform the requested operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ConsumerIdentifierOverMaxValue">
            <summary>
              Looks up a localized string similar to The 'identifier' parameter exceeds the maximum allowed size of {0} characters..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CouldNotAcquireAccessToken">
            <summary>
              Looks up a localized string similar to Unable to acquire an access token using the provided credential..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CouldNotCreateLink">
            <summary>
              Looks up a localized string similar to Unable to create the items needed to communicate with the Event Hubs service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.DeveloperCodeEventProcessingError">
            <summary>
              Looks up a localized string similar to An error was encountered while executing developer-provided to process events.  This will normally fault the task responsible for partition processing, causing it to be restarted from the last checkpoint.  On some hosts, it may crash the process.  It is very strongly advised that all developer-provided code include a try/catch wrapper and no exceptions are allowed to bubble..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.DeveloperCodeError">
            <summary>
              Looks up a localized string similar to An error was encountered while executing custom code, such as in an event handler..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.DeveloperCodeExceptionMessageMask">
            <summary>
              Looks up a localized string similar to [Developer Code Exception] : {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.EventBatchIsLocked">
            <summary>
              Looks up a localized string similar to The event batch is currently being used in communication with the Event Hubs service; events may not be added until the active operation is complete..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.FailedToCreateReader">
            <summary>
              Looks up a localized string similar to Could not create a reader of events for Event Hub: '{0}', partition: '{1}', consumer group: '{2}'..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.FailedToSerializeUnsupportedType">
            <summary>
              Looks up a localized string similar to Serialization failed due to an unsupported type, {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidConnectionString">
            <summary>
              Looks up a localized string similar to The connection string could not be parsed; either it was malformed or contains no well-known tokens..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidEncoding">
            <summary>
              Looks up a localized string similar to The string has an invalid encoding format..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidEventPositionForFilter">
            <summary>
              Looks up a localized string similar to The event position is not valid for filtering.  It must have an offset, sequence number, or enqueued time available to filter against..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidFullyQualifiedNamespace">
            <summary>
              Looks up a localized string similar to The value '{0}' is not a well-formed Event Hubs fully qualified namespace..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidMessageBody">
            <summary>
              Looks up a localized string similar to An invalid message body was encountered.  Either the body was null or an incorrect type. Expected: {0}.
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidSharedAccessSignature">
            <summary>
              Looks up a localized string similar to The shared access signature could not be parsed; it was either malformed or incorrectly encoded..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidEndpointAddress">
            <summary>
              Looks up a localized string similar to The endpoint address could not be parsed; it was either malformed or not using the `sb://` scheme..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidTimePeriod">
            <summary>
              Looks up a localized string similar to The time period may not be Zero or Infinite..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidTransportType">
            <summary>
              Looks up a localized string similar to The requested transport type, '{0}' is not supported..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.MessageSizeExceeded">
            <summary>
              Looks up a localized string similar to The message (id:{0}, size:{1} bytes) is larger than is currently allowed ({2} bytes)..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.MissingConnectionInformation">
            <summary>
              Looks up a localized string similar to The connection string used for an Event Hub client must specify the Event Hubs namespace host, and a Shared Access Signature (both the name and value) to be valid. The path to an Event Hub must be included in the connection string or specified separately..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OnlyOneEventHubNameMayBeSpecified">
            <summary>
              Looks up a localized string similar to The path to an Event Hub may be specified as part of the connection string or as a separate value, but not both..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ProxyMustUseWebSockets">
            <summary>
              Looks up a localized string similar to A proxy may only be used for a web sockets connection..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ResourceMustMatchSharedAccessSignature">
            <summary>
              Looks up a localized string similar to The requested resource, '{0}', does not match the resource of the shared access signature, '{1}'. A token cannot be issued..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.RetryOptionsMustBeSet">
            <summary>
              Looks up a localized string similar to Retry options must be specified; if no retry is desired, please set the maximum number of retries to 0. To provide a custom retry policy, please assign it on the client directly..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.RunningEventProcessorCannotPerformOperation">
            <summary>
              Looks up a localized string similar to The event processor is already running and needs to be stopped in order to perform this operation..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.SharedAccessKeyIsRequired">
            <summary>
              Looks up a localized string similar to In order to update the signature, a shared access key must have been provided when the shared access signature was created..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.SharedKeyCredentialCannotGenerateTokens">
            <summary>
              Looks up a localized string similar to A shared key credential is unable to generate a token directly. Please use this credential when creating an Event Hub Client, for proper generation of shared key tokens..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.TimeoutMustBePositive">
            <summary>
              Looks up a localized string similar to A timeout value must be positive. To request using the default timeout, please use TimeSpan.Zero or null..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.TimeSpanMustBeNonNegative">
            <summary>
              Looks up a localized string similar to Argument {0} must be a non-negative timespan value. The provided value was {1}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.TrackLastEnqueuedEventPropertiesNotSet">
            <summary>
              Looks up a localized string similar to This information is only available when TrackLastEnqueuedEventProperties is set on the Event Hub consumer options..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnknownCommunicationException">
            <summary>
              Looks up a localized string similar to An unknown error was encountered while communicating with the Event Hubs service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnknownConnectionType">
            <summary>
              Looks up a localized string similar to The specified connection type, "{0}", is not recognized as valid in this context..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnknownRetryMode">
            <summary>
              Looks up a localized string similar to The requested retry mode, '{0}', is not known; a retry delay cannot be determined..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnrecoverableException">
            <summary>
              Looks up a localized string similar to An unrecoverable exception was encountered that left the environment in a bad state..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnsupportedCredential">
            <summary>
              Looks up a localized string similar to The credential is not a known and supported credential type. Please use a JWT credential or shared key credential..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnsupportedTransportEventType">
            <summary>
              Looks up a localized string similar to The requested transport event type, '{0}', is not supported by the active transport client..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ValueMustBeAtLeast">
            <summary>
              Looks up a localized string similar to The value supplied must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to The value supplied must be between {0} and {1}..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.BlobsResourceDoesNotExist">
            <summary>
              Looks up a localized string similar to The Azure Storage Blobs container or blob used by the Event Processor Client does not exist..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotCreateCheckpointForEmptyEvent">
            <summary>
              Looks up a localized string similar to A checkpoint cannot be created or updated using an empty event..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.HandlerHasAlreadyBeenAssigned">
            <summary>
              Looks up a localized string similar to Another handler has already been assigned to this event and there can be only one..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.HandlerHasNotBeenAssigned">
            <summary>
              Looks up a localized string similar to This handler has not been previously assigned to this event..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationEventProcessingDeveloperCode">
            <summary>
              Looks up a localized string similar to Executing developer-provided code to process events..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationListOwnership">
            <summary>
              Looks up a localized string similar to Retrieving list of ownership from the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationGetPartitionIds">
            <summary>
              Looks up a localized string similar to Retrieving list of partition identifiers from a Consumer Client..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationListCheckpoints">
            <summary>
              Looks up a localized string similar to Retrieving list of checkpoints from the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationLoadBalancing">
            <summary>
              Looks up a localized string similar to Executing a load balancing cycle..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationClaimOwnership">
            <summary>
              Looks up a localized string similar to Attempting to claim a new ownership in the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationRenewOwnership">
            <summary>
              Looks up a localized string similar to Attempting to renew all of the processor's partition ownership in the storage service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationReadEvents">
            <summary>
              Looks up a localized string similar to Reading events from the Event Hubs service..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationEventProcessingLoop">
            <summary>
              Looks up a localized string similar to Performing the main Event Processor loop..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OperationSurrenderOwnership">
            <summary>
              Looks up a localized string similar to Surrendering ownership of a partition..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotReadLastEnqueuedEventPropertiesWithoutEvent">
            <summary>
              Looks up a localized string similar to The last enqueued event properties cannot be read when an event is not available..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.AggregateEventProcessingExceptionMessage">
            <summary>
              Looks up a localized string similar to One or more exceptions occurred during event processing.  Please see the inner exceptions for more detail..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.OnlyOneSharedAccessAuthorizationMayBeSpecified">
            <summary>
              Looks up a localized string similar to The authorization for a connection string may specifiy a shared key or precomputed shared access signature, but not both.  Please verify that your connection string does not have the `SharedAccessSignature` token if you are passing the  `SharedKeyName` and `SharedKey`..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotPublishToGateway">
            <summary>
              Looks up a localized string similar to The producer was configured to use features that require publishing to a specific partition.  Publishing with automatic routing or using a partition key is not supported by this producer..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.IdempotentAlreadyPublished">
            <summary>
              Looks up a localized string similar to These events have already been successfully published.  When idempotent publishing is enabled, events that were acknowledged by the Event Hubs service may not be published again..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ListCheckpointsAsyncObsolete">
            <summary>
              Looks up a localized string similar to The ListCheckpointsAsync method has been superseded by GetCheckpointAsync and should no longer be called..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.UnknownAmqpBodyType">
            <summary>
              Looks up a localized string similar to The type of AMQP body for the message could not be determined..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.RawAmqpBodyTypeMask">
            <summary>
              Looks up a localized string similar to The event body cannot be retrieved using the {1} property of {0}.  A body of type {2} can be accessed using the {3} method of {0} and inspecting the underlying AMQP message..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.DictionaryKeyNotFoundMask">
            <summary>
              Looks up a localized string similar to The given key '{0}' was not present in the dictionary..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidAmqpMessageValueBodyMask">
            <summary>
              Looks up a localized string similar to {0} is not a supported value body type..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.InvalidAmqpMessageDictionaryTypeMask">
            <summary>
              Looks up a localized string similar to The {0} key `{1}` has a value of type `{2}` which is not supported for AMQP transport..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotChangeHandlersWhenPublishing">
            <summary>
              Looks up a localized string similar to This handler cannot be changed after an event has been enqueued; closing or disposing the producer will unregister any current hander..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ProcessorLoadBalancingCycleSlowMask">
            <summary>
              Looks up a localized string similar to WARNING: A load balancing cycle has taken too long to complete.  A slow cycle can cause stability issues with partition ownership.  Consider investigating storage latency and thread pool health.  Common causes are soft delete being enabled for storage and too many partitions owned.  You may also want to consider increasing the 'PartitionOwnershipExpirationInterval' in the processor options.  Cycle Duration: '{0}' seconds.  Partition Ownership Interval '{1}' seconds..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.ProcessorLoadBalancingIntervalsTooCloseMask">
            <summary>
              Looks up a localized string similar to WARNING: The 'PartitionOwnershipExpirationInterval' and 'LoadBalancingUpdateInterval' are configured for intervals that may cause stability issues with partition ownership.  It is recommended that the 'PartitionOwnershipExpirationInterval' be at least 3 times greater than the 'LoadBalancingUpdateInterval' and very strongly advised that it should be no less than twice as long.  It is advised to adjust the intervals in the processor options.  Load Balancing Interval '{1:0:00}' seconds.  Partition Ownership Interval '{1:0:00}' seconds..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotEnqueueEventWithoutHandler">
            <summary>
              Looks up a localized string similar to Events cannot be enqueued processing without the {0} handler set..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.CannotSendToUknownPartition">
            <summary>
              Looks up a localized string similar to Events cannot be published to the requested partition; no partition with the id `{2}` are associated with the Event Hub..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.EventTooLargeMask">
            <summary>
              Looks up a localized string similar to The event is too large for be published to the Event Hub: '{0}`.  Size limit: {1} bytes..
            </summary>
        </member>
        <member name="P:Azure.Messaging.EventHubs.Resources.TroubleshootingGuideLink">
            <summary>
              Looks up a localized string similar to For troubleshooting information, see https://aka.ms/azsdk/net/eventhubs/exceptions/troubleshoot.
            </summary>
        </member>
        <member name="T:Azure.Core.Argument">
             <summary>
               Provides a consistent means for verifying arguments and other invariants for a given
               member.
             </summary>
            
             <remarks>
               This class extends the <see cref="T:Azure.Core.Argument" /> type, referenced as a partial
               class via shared source; the base partial class definition may be found in the "SharedSource"
               folder of this project.
             </remarks>
            
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotEmptyOrWhiteSpace(System.String,System.String)">
             <summary>
               Ensures that an argument's value is a string comprised of only whitespace, though
               <c>null</c> is considered a valid value.  An <see cref="T:System.ArgumentException" /> is thrown
               if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentException">The argument is empty or contains only white-space.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotTooLong(System.String,System.Int32,System.String)">
             <summary>
               Ensures that a string argument's length is below a maximum allowed threshold,
               throwing an <see cref="T:System.ArgumentOutOfRangeException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="maximumLength">The maximum allowable length for the <paramref name="argumentValue" />; its length must be less than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> exceeds <paramref name="maximumLength" /> characters.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNegative(System.TimeSpan,System.String)">
             <summary>
               Ensures that an argument's value is not a negative value, throwing an
               <see cref="T:System.ArgumentOutOfRangeException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is a negative <see cref="T:System.TimeSpan" /> value.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertAtLeast(System.Int64,System.Int64,System.String)">
             <summary>
               Ensures that an argument's value is at least as large as a given lower bound, throwing
               <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="minimumValue">The minimum to use for comparison; <paramref name="argumentValue" /> must be greater than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is less than <paramref name="minimumValue" />.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertAtLeast(System.Int32,System.Int32,System.String)">
             <summary>
               Ensures that an argument's value is at least as large as a given lower bound, throwing
               <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The value of the argument to verify.</param>
             <param name="minimumValue">The minimum to use for comparison; <paramref name="argumentValue" /> must be greater than or equal to this value.</param>
             <param name="argumentName">The name of the argument being considered.</param>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="argumentValue" /> is less than <paramref name="minimumValue" />.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDisposed(System.Boolean,System.String)">
             <summary>
               Ensures that an instance has not been disposed, throwing an
               <see cref="T:System.ObjectDisposedException" /> if that invariant is not met.
             </summary>
            
             <param name="wasDisposed"><c>true</c> if the target instance has been disposed; otherwise, <c>false</c>.</param>
             <param name="targetName">The name of the target instance that is being verified.</param>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotClosed(System.Boolean,System.String)">
             <summary>
               Ensures that an instance has not been closed, throwing an
               <see cref="T:Azure.Messaging.EventHubs.EventHubsException" /> if that invariant is not met.
             </summary>
            
             <param name="wasClosed"><c>true</c> if the target instance has been closed; otherwise, <c>false</c>.</param>
             <param name="targetName">The name of the target instance that is being verified.</param>
            
             <exception cref="T:Azure.Messaging.EventHubs.EventHubsException"><paramref name="wasClosed" /> is <c>true</c>.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertWellFormedEventHubsNamespace(System.String,System.String)">
             <summary>
               Ensures that an argument's value is a well-formed Event Hubs fully qualified namespace value,
               throwing a <see cref="T:System.ArgumentException" /> if that invariant is not met.
             </summary>
            
             <param name="argumentValue">The argument value.</param>
             <param name="argumentName">Name of the argument.</param>
            
            
             <exception cref="T:System.ArgumentException"><paramref name="argumentValue" /> is not a well-formed Event Hubs fully qualified namespace.</exception>
            
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.AssertEnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not defined for <paramref name="enumType" />.
            </summary>
            <param name="enumType">The type to validate against.</param>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not defined for <paramref name="enumType" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.AddLink(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a link to the scope. This must be called before <see cref="M:Azure.Core.Pipeline.DiagnosticScope.Start" /> has been called for the DiagnosticScope.
            </summary>
            <param name="traceparent">The traceparent for the link.</param>
            <param name="tracestate">The tracestate for the link.</param>
            <param name="attributes">Optional attributes to associate with the link.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.SetTraceContext(System.String,System.String)">
            <summary>
            Sets the trace context for the current scope.
            </summary>
            <param name="traceparent">The trace parent to set for the current scope.</param>
            <param name="tracestate">The trace state to set for the current scope.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Shared.MessagingClientDiagnostics">
            <summary>
            Client Diagnostics support for messaging clients. Currently, this is only used for AMQP clients.
            HTTP libraries should use the ClientDiagnostics type instead.
            </summary>
        </member>
        <member name="M:Azure.Core.Shared.MessagingClientDiagnostics.CreateScope(System.String,Azure.Core.Pipeline.DiagnosticScope.ActivityKind,Azure.Core.Shared.MessagingDiagnosticOperation)">
            <summary>
            Creates a diagnostic scope to be used for messaging operations. This method will add messaging-specific attributes to the scope taking into account the
            ActivitySource configuration. Links are not added here as in many instances links can only be added after the scope is already created.
            </summary>
            <param name="activityName">The name to apply to the activity.</param>
            <param name="kind">The kind to apply to the activity.</param>
            <param name="operation">The type of messaging operation.</param>
            <returns>The created diagnostic scope containing the common set of messaging attributes that are knowable upon creation.</returns>
        </member>
        <member name="M:Azure.Core.Shared.MessagingClientDiagnostics.TryExtractTraceContext(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String@,System.String@)">
             <summary>
               Attempts to extract the trace context from a message's properties.
             </summary>
            
             <param name="properties">The properties holding the trace context.</param>
             <param name="traceparent">The trace parent of the message.</param>
             <param name="tracestate">The trace state of the message.</param>
             <returns><c>true</c> if the message properties contained the diagnostic id; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Core.Shared.MessagingClientDiagnostics.TryExtractTraceContext(System.Collections.Generic.IDictionary{System.String,System.Object},System.String@,System.String@)">
             <summary>
               Attempts to extract the trace context from a message's properties.
             </summary>
            
             <param name="properties">The properties holding the trace context.</param>
             <param name="traceparent">The trace parent of the message.</param>
             <param name="tracestate">The trace state of the message.</param>
             <returns><c>true</c> if the message properties contained the diagnostic id; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Azure.Core.Shared.MessagingClientDiagnostics.InstrumentMessage(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean@,System.String@,System.String@)">
            <summary>
            Instrument the message properties for tracing. If tracing is enabled, a diagnostic id will be added to the message properties,
            which alters the message size.
            </summary>
            <param name="properties">The dictionary of application message properties.</param>
            <param name="activityName">The activity name to use for the diagnostic scope.</param>
            <param name="scopeCreated">Whether or not a new scope was created while instrumenting the message.</param>
            <param name="traceparent">The traceparent that was either added, or that already existed in the message properties.</param>
            <param name="tracestate">The tracestate that was either added, or that already existed in the message properties.</param>
        </member>
        <member name="M:Azure.Core.Shared.MessagingClientDiagnostics.ResetEvent(System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
               Resets the instrumentation associated with a properties bag.
             </summary>
            
             <param name="properties">The properties to reset.</param>
        </member>
        <member name="T:Azure.Core.Shared.MessagingDiagnosticOperation">
            <summary>
            Represents the common set of operations for messaging diagnostics, as per the Open Telemetry semantic conventions.
            This is defined as a partial struct so that it can be extended by other libraries.
            <seealso href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/messaging.md#operation-names" />
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
